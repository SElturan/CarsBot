from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from config import dp, bot , check_language, check_alpha_only
from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove


class Applications:
    def __init__(self, message: types.Message):
        self.bot = bot
        self.message = message



    async def aplications_people(self, message:types.Message):

        class AplicationsFSM(StatesGroup):
            name = State()
            date = State()
            phone = State()
            account = State()
            password = State()
            branch = State()


        await AplicationsFSM.name.set()
        await message.answer('–û—Ç–ª–∏—á–Ω–æ —Å–µ–π—á–∞—Å –º—ã –∑–∞–ø–æ–ª–Ω–∏–º –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –±–µ–∑ —Ü–∏—Ñ—Ä')


        @dp.message_handler(state=AplicationsFSM.name)
        async def name(message: types.Message, state: FSMContext):
            async with state.proxy() as data:
                if check_language(message.text):
                    data['name'] = message.text
                    await AplicationsFSM.next()
                
                    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è! –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ 01.01.2002')
    
                else:
                    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é!')
                    return

        @dp.message_handler(state=AplicationsFSM.date)
        async def date(message: types.Message, state: FSMContext):

            async with state.proxy() as data:

                data['date'] = message.text
            await AplicationsFSM.next()
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞üì±", request_contact=True))
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!',reply_markup=keyboard)

        @dp.message_handler(content_types=types.ContentTypes.CONTACT,state=AplicationsFSM.phone)
        async def phone(message: types.Contact, state: FSMContext):

            async with state.proxy() as data:
                data['phone'] = message.contact.phone_number
            await AplicationsFSM.next()
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –±–µ–∑ —Ü–∏—Ñ—Ä –∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ', reply_markup= ReplyKeyboardRemove())

        @dp.message_handler(state=AplicationsFSM.account)
        async def account(message: types.Message, state: FSMContext):
            
            
            async with state.proxy() as data:
                # if check_language_english(message.text):
                #     print('[p[]]')
                    # if check_alpha_only(message.text):
                    data['account'] = message.text
                    await AplicationsFSM.next()
                    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞!')
                    # else:
                    #     await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –±–µ–∑ —Ü–∏—Ñ—Ä!')
                    #     return
                # else:
                #     await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ!')
                #     return
        
        @dp.message_handler(state=AplicationsFSM.password)
        async def password(message: types.Message, state: FSMContext):
            async with state.proxy() as data:
                data['password'] = message.text
            await AplicationsFSM.next()
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª –≥–¥–µ –≤—ã –æ–±—ã—á–Ω–æ –∏–≥—Ä–∞–µ—Ç–µ!')

        @dp.message_handler(state=AplicationsFSM.branch)
        async def branch(message: types.Message, state: FSMContext):
            async with state.proxy() as data:
                data['branch'] = message.text
            await AplicationsFSM.next()
            data = await state.get_data()
            msg = (f'–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è: {data["name"]}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data["date"]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data["phone"]}\n–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {data["account"]}\n–ü–∞—Ä–æ–ª—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {data["password"]}\n–§–∏–ª–∏–∞–ª: {data["branch"]}')
            
            await state.finish()

            await bot.send_message(chat_id = 5954454881, text = msg)
            await message.answer(text = msg)
            await message.answer('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤.\n–ë—É–¥—å —Ñ–∞–Ω–∞—Ç–æ–º –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏!')


            






