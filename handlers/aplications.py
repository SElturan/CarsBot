import json
import re
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from config import dp, bot
from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from keyboards.keyboard import get_keyboard, addres_kb
from handlers.base import *
from config import url, headers


class Applications:
    def __init__(self, message: types.Message):
        self.bot = bot
        self.message = message


    async def aplications_people(self, message:types.Message):

        class AplicationsRegistration(StatesGroup):
            phone = State()



        await AplicationsRegistration.phone.set()
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞üì±", request_contact=True))
        await message.answer(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=keyboard)

        @dp.message_handler(content_types=types.ContentTypes.CONTACT,state=AplicationsRegistration.phone)
        async def phone(message: types.Contact, state: FSMContext):

            async with state.proxy() as data:
                data['phone'] = message.contact.phone_number
                phone = data['phone']
                data = {
                        "user_id": message.from_user.id,
                        "first_name": message.from_user.first_name,
                        "phone_number": phone,
                        }


                
                await add_user(data)
                if add_user:
                    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ', reply_markup=get_keyboard('user'))
                    await state.finish()
                else:
                    await message.answer('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
                    await state.finish()

                await state.finish()


    async def add_num_cars(self, message:types.Message):
        class ApplicationsRegistrationCar(StatesGroup):
            car_num = State()

        await ApplicationsRegistrationCar.car_num.set()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n–ë–µ–∑ RUS')

        @dp.message_handler(state=ApplicationsRegistrationCar.car_num)
        async def car_num(message: types.Message, state: FSMContext):
            async with state.proxy() as data:
                data['car_num'] = message.text
                car_num = data['car_num']
                car_num = car_num.upper()
               

                car_num = car_num.replace('S', 'C').replace('Y', '–£')
                
                similar_chars = {
                    '–ê': 'A',
                    '–í': 'B',
                    '–ï': 'E',
                    '–ö': 'K',
                    '–ú': 'M',
                    '–ù': 'H',
                    '–û': 'O',
                    '–†': 'P',
                    '–°': 'C',
                    '–¢': 'T',
                    '–£': 'Y',
                    '–•': 'X'
                }

                # –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Ö–æ–∂–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–æ–º–µ—Ä–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ –∏—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏
             
                for cyrillic_char, latin_char in similar_chars.items():
                    car_num = car_num.replace(cyrillic_char, latin_char)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç—É
                car_num_pattern = re.compile(r'^[ABEKMHOPCTYX]{1}\d{3}[ABEKMHOPCTYX]{2}\d{2,3}$')
                
                if car_num_pattern.match(car_num):
                    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É, —Ç–æ –∑–∞–º–µ–Ω—è–µ–º –±—É–∫–≤—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
                    car_num = car_num.replace('A', '–ê').replace('B', '–í').replace('E', '–ï').replace('K', '–ö').replace('M', '–ú').replace('H', '–ù').replace('O', '–û').replace('P', '–†').replace('C', '–°').replace('T', '–¢').replace('Y', '–£').replace('X', '–•').replace('S', 'C').replace('Y', '–£').replace('RUS', '')
    

                    data_car = {
                    "user_id": message.from_user.id,
                    "car_num": car_num
                }
                    success = await add_num_car(data_car)
                    if success:
                        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–º–µ—Ä', reply_markup=get_keyboard('user'))
                    else:
                        await message.answer('–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —É–∂–µ 3 –Ω–æ–º–µ—Ä–∞', reply_markup=get_keyboard('user'))
                else:
                    await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –†–æ—Å—Å–∏–∏ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ñ–æ—Ä–º–∞—Ç "A000AA00" –∏–ª–∏ "000AA000", –≥–¥–µ "A" - —ç—Ç–æ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞, "0" - —Ü–∏—Ñ—Ä—ã. –ë–µ–∑ RUS', reply_markup=get_keyboard('user'))
                    
          
                await state.finish()

    async def aplications_car(self, message:types.Message):

        class AplicationsRegistrationCar(StatesGroup):
            phone = State()



        await AplicationsRegistrationCar.phone.set()
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞üì±", request_contact=True))
        await message.answer(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=keyboard)

        @dp.message_handler(content_types=types.ContentTypes.CONTACT,state=AplicationsRegistrationCar.phone)
        async def phone(message: types.Contact, state: FSMContext):

            async with state.proxy() as data:
                data['phone'] = message.contact.phone_number

                phone = data['phone']




                data = {
                        "user_id": message.from_user.id,
                        "first_name": message.from_user.first_name,
                        "phone_number": phone,
                        }
                
                
                
                
                await add_user(data)
                if add_user:
                    await self.add_num_cars(message)
                                        
                else:
                    await message.answer('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
                    await state.finish()

                








    async def added_address(self, message:types.Message):
        class AplicationsAddedAddress(StatesGroup):
            city = State()
            street = State()
            house_number = State()



        await AplicationsAddedAddress.city.set()
        await bot.send_message(chat_id=message.chat.id,text='–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥')

        @dp.message_handler(state=AplicationsAddedAddress.city)
        async def city(message: types.Message, state: FSMContext):
            async with state.proxy() as data:
                result = {'query': f'–≥–æ—Ä–æ–¥ {message.text}', 'count': 1}
                json_data = json.dumps(result)
                check_city = await post_dadata(headers, url, json_data)
                data['city'] = check_city
                
                if check_city:
                    await message.answer(f'–í—ã –≤–≤–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ—Ä–æ–¥ {check_city}')
                    await message.answer('–í–≤–µ–¥–∏—Ç–µ —É–ª–∏—Ü—É')
                    await AplicationsAddedAddress.next()
                else:
                    await message.answer('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ—Ä–æ–¥')
                    return
                
        @dp.message_handler(state=AplicationsAddedAddress.street)
        async def street(message: types.Message, state: FSMContext):
            async with state.proxy() as data:
                —Åity_result = data['city']
                message_text = f'{—Åity_result} {message.text}'
                result = {'query': message_text, 'count': 1}
                json_data = json.dumps(result)
                check_street = await post_dadata_street(headers, url, json_data)
                
                data['street'] = check_street
                

                
                if check_street:
                   
                    await message.answer(f'–í—ã –≤–≤–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —É–ª–∏—Ü—É {check_street}')
                    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞')
                    await AplicationsAddedAddress.next()
                else:
                    await message.answer(f'–£–ª–∏—Ü–∞ –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å')
                    return
                
        @dp.message_handler(state=AplicationsAddedAddress.house_number)
        async def house_number(message: types.Message, state: FSMContext):
            async with state.proxy() as data:
                data['house_number'] = message.text
                house_number = data['house_number']
                —Åity = data['city']
                street = data['street']
                

                data = {
                            "user_id": message.from_user.id,
                            "city": —Åity,
                            "address": street,
                            "house_number": house_number
                        }
                
              
                await add_address(data)
                if add_address:
                    await message.answer('–ê–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=get_keyboard('user'))
                    await state.finish()
                else:
                    await message.answer('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞')
                    await state.finish()

                

    

    async def message_car_num(self, message:types.Message):
        user_id = message.from_user.id
        chekc_user = await is_user_registered(user_id)
       
        if chekc_user[0]['role'] == 'UK':
            markup=get_keyboard('uk')

        elif chekc_user[0]['role'] == 'admin':
            markup=get_keyboard('admin')
        
        else:
            markup=get_keyboard('user')
    

        
        class AplicationsFSM(StatesGroup):
            car_num = State()
            message_text = State()
            car_num_user = State()

       
        await AplicationsFSM.car_num.set()
        await bot.send_message(chat_id=message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', reply_markup=ReplyKeyboardRemove())

        @dp.message_handler(state=AplicationsFSM.car_num)
        async def car_num(message: types.Message, state: FSMContext):
                
            async with state.proxy() as data:
                data['car_num'] = message.text
                car_num = data['car_num']
                car_num = car_num.upper()
                car_num = car_num.replace('A', '–ê').replace('B', '–í').replace('E', '–ï').replace('K', '–ö').replace('M', '–ú').replace('H', '–ù').replace('O', '–û').replace('P', '–†').replace('C', '–°').replace('T', '–¢').replace('Y', '–£').replace('X', '–•').replace('S', 'C').replace('Y', '–£')
                data['car_num'] = car_num
                msg_id = await message_car_num(car_num)
                if msg_id:
                    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É')
                    await AplicationsFSM.next()
                else:
                    await message.answer('–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ', reply_markup=markup)
                    await state.finish()
        

        @dp.message_handler(state=AplicationsFSM.message_text)
        async def message_text(message: types.Message, state: FSMContext):   
            async with state.proxy() as data:
                data['message_text'] = message.text
         
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', reply_markup=addres_kb('car_number', user_id=user_id))
            
            await AplicationsFSM.next()

                
        
        
        @dp.message_handler(state=AplicationsFSM.car_num_user)
        async def car_num_user(message: types.Message, state: FSMContext):
            async with state.proxy() as data:
                data['car_num_user'] = message.text
                car_num_user = data['car_num_user']
                car_num_user = car_num_user.upper()
                car_num_user = car_num_user.replace('A', '–ê').replace('B', '–í').replace('E', '–ï').replace('K', '–ö').replace('M', '–ú').replace('H', '–ù').replace('O', '–û').replace('P', '–†').replace('C', '–°').replace('T', '–¢').replace('Y', '–£').replace('X', '–•').replace('S', 'C').replace('Y', '–£').replace('RUS', '')
                data['car_num_user'] = car_num_user
            user_car_num = message.from_user.id
            chekc_car_number = await get_number_car_check(user_car_num, car_num_user)
            if not chekc_car_number:
                await message.answer('–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞', reply_markup=markup)
                await state.finish()
            else:
                messages = data['message_text']
                car_num = data['car_num']
                message_text = f'–û–¢ –ù–û–ú–ï–†–ê: {car_num_user}\n–î–õ–Ø –ù–û–ú–ï–†–ê: {car_num}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ:\n{messages}'

                msg_id = await message_car_num(car_num)
                if msg_id:
                    for user_id in msg_id:
                        try:
                            await bot.send_message(chat_id=user_id, text=message_text)
                            await state.finish()
                        except Exception:
                            continue
                        await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', reply_markup=markup)
                        await state.finish()
                else:
                    await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', reply_markup=markup)
                    await state.finish()
                    


    async def deleted_car_num(self, message:types.Message):
        user_id = message.from_user.id
        chekc_user = await is_user_registered(user_id)
       
        if chekc_user[0]['role'] == 'UK':
            markup=get_keyboard('uk')

        elif chekc_user[0]['role'] == 'admin':
            markup=get_keyboard('admin')
        
        else:
            markup=get_keyboard('user')
    

        class AplicationsDeleteCar(StatesGroup):
            car_num = State()



        await AplicationsDeleteCar.car_num.set()
        await bot.send_message(chat_id=message.chat.id,  text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å',reply_markup=addres_kb('car_number', user_id=user_id))

        @dp.message_handler(state=AplicationsDeleteCar.car_num)
        async def car_num(message: types.Message, state: FSMContext):

            async with state.proxy() as data:
                data['car_num'] = message.text
                car_num = data['car_num']
                car_num = car_num.upper()
                car_num = car_num.replace('A', '–ê').replace('B', '–í').replace('E', '–ï').replace('K', '–ö').replace('M', '–ú').replace('H', '–ù').replace('O', '–û').replace('P', '–†').replace('C', '–°').replace('T', '–¢').replace('Y', '–£').replace('X', '–•').replace('S', 'C').replace('Y', '–£').replace('RUS', '')
                
                user_id = message.from_user.id
                deleted = await deleted_num_car(user_id,car_num)
                if deleted:
                    await message.answer('–ù–æ–º–µ—Ä —É–¥–∞–ª–µ–Ω', reply_markup=markup)
                    await state.finish()
                else:
                    await message.answer('–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', reply_markup=markup)
                    await state.finish()
            
                await state.finish()
                


    async def deleted_address(self, message:types.Message):

        class AplicationsDeleteAddress(StatesGroup):
            address = State()



        await AplicationsDeleteAddress.address.set()
        user_id = message.from_user.id
        await bot.send_message(chat_id=message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ id –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å', reply_markup=addres_kb('address_keyboard', user_id=user_id))

        @dp.message_handler(state=AplicationsDeleteAddress.address)
        async def address(message: types.Message, state: FSMContext):
            async with state.proxy() as data:
                data['address'] = message.text
                address = data['address']
                user_id = message.from_user.id
                deleted = await deleted_address(address, user_id)
                if deleted:
                    await message.answer('–ê–¥—Ä–µ—Å —É–¥–∞–ª–µ–Ω', reply_markup=get_keyboard('user'))
                    await state.finish()
                else:
                    await message.answer('–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω', reply_markup=get_keyboard('user'))
                    await state.finish()

                await state.finish()

    